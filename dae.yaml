!obj:pylearn2.train.Train {
    dataset: &train !obj:lines_dataset.Lines {
        shape : 12
    },
    model: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
        nvis : 144,
        nhid : 100,
        irange : 0.05,
        corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
            corruption_level: .2,
        },
        act_enc: "tanh",
        act_dec: "tanh",    # Linear activation on the decoder side.
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate : 1e-4,
        learning_rule : !obj:pylearn2.training_algorithms.learning_rule.AdaDelta {},
        batch_size : 10,
        monitoring_batches : 10,
        monitoring_dataset : *train,
        cost : !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.autoencoder.MeanSquaredReconstructionError {},
                !obj:pylearn2.costs.autoencoder.SparseActivation {
                    coeff: 0.001,
                    p: 0.1
                }
            ]
        },
        termination_criterion : !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 1000,
                },
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "objective",
                    prop_decrease: 0.0001,
                    N: 10
                }
            ]
        }
    },
    save_path: "dae.pkl",
    save_freq: 1
}
